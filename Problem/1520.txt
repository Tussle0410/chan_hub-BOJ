<problem-name>내리막 길
<blog>https://tussle.tistory.com/441
<tag>다이나믹 프로그래밍, 그래프 이론, 그래프 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.*;
public class Main {
	public static int[][] board;
	public static int[][] DP = new int[501][501];
	public static int[] dx = {-1,1,0,0};
	public static int[] dy = {0,0,-1,1};
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	int M = Integer.parseInt(st.nextToken());
    	int N = Integer.parseInt(st.nextToken());
    	board = new int[M][N];
    	for(int i=0;i&lt;M;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		for(int j=0;j&lt;N;j++) {
    			board[i][j] = Integer.parseInt(st.nextToken());
    			DP[i][j] = -1;
    		}
    	}
    	downhill(M, N, 0, 0);
    	bw.write(String.valueOf(DP[0][0]));
    	bw.flush();
    	bw.close();
    	br.close();
    }
    public static int downhill(int M, int N, int curX, int curY) {
    	if(curX==M-1 && curY==N-1) {
    		return 1;
    	}
    	if(DP[curX][curY]!=-1)
    		return DP[curX][curY];

    	int height = board[curX][curY];
    	DP[curX][curY] = 0;
    	for(int i=0;i&lt;4;i++) {
    		int tempX = curX + dx[i];
    		int tempY = curY + dy[i];
    		if(tempX&lt;0 || tempY&lt;0 || tempX>=M || tempY>=N|| height&lt;=board[tempX][tempY]) {
    			continue;
    		}else {
    			DP[curX][curY] += downhill(M, N, tempX, tempY);
    		}
    	}
    	return DP[curX][curY];
    }
}