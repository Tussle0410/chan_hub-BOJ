<problem-name>치즈
<blog>https://tussle.tistory.com/972
<tag>구현, 그래프 이론, 그래프 탐색, 시뮬레이션, 너비 우선 탐색
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Pos {
		int r, c;

		public Pos(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}

	static int[][] map;
	static int cnt, N, M;
	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		for (int i = 0; i &lt; N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j &lt; M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1)
					cnt++;
			}
		}
		int result = 0, preResult = 0;
		while (cnt > 0) {
			preResult = cnt;
			bfs(0, 0);
			result++;
		}
		bw.write(String.valueOf(result));
		bw.newLine();
		bw.write(String.valueOf(preResult));
		bw.flush();
		bw.close();
		br.close();
	}

	private static void bfs(int r, int c) {
		Queue&lt;Pos> q = new ArrayDeque&lt;>();
		boolean[][] visited = new boolean[N][M];
		visited[0][0] = true;
		q.offer(new Pos(0, 0));
		while(!q.isEmpty()) {
			Pos cur = q.poll();
			for(int i=0;i&lt;4;i++) {
				int tempR = cur.r + dr[i];
				int tempC = cur.c + dc[i];
				if(inSpace(tempR, tempC) && !visited[tempR][tempC]) {
					visited[tempR][tempC] = true;
					if(map[tempR][tempC]==1) {
						map[tempR][tempC] = 0;
						cnt--;
					}else
						q.offer(new Pos(tempR, tempC));
				}
			}
		}
	}

	private static boolean inSpace(int r, int c) {
		if(r >= 0 && c>=0 && r&lt;N && c&lt;M)
			return true;
		return false;
	}

}