<problem-name>숫자판 점프
<blog>https://tussle.tistory.com/842
<tag>그래프 이론, 브루트포스 알고리즘, 그래프 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.*;

public class Main {
    static class info{
        int x, y, count;
        String value;
        public info(int x, int y, String value, int count) {
            this.x = x;
            this.y = y;
            this.value = value;
            this.count = count;
        }
    }
    static int[][] map = new int[5][5];
    static int dx[] = {0, 0, -1, 1};
    static int dy[] = {-1, 1, 0, 0};
    static HashSet&lt;String> hash = new HashSet&lt;>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        for(int i=0;i&lt;5;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j&lt;5;j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }
        for(int i=0;i&lt;5;i++){
            for(int j=0;j&lt;5;j++)
                bfs(i, j);
        }
        bw.write(hash.size() + "");
        bw.flush();
        bw.close();
        br.close();
    }
    static void bfs(int x, int y){
        Queue&lt;info> q = new LinkedList&lt;>();
        q.add(new info(x, y, String.valueOf(map[y][x]), 1));
        while(!q.isEmpty()){
            info cur = q.poll();
            if(cur.count==6){
                if(!hash.contains(cur.value))
                    hash.add(cur.value);
                continue;
            }
            for(int i=0;i&lt;4;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                if(inMap(tempX,tempY))
                    q.add(new info(tempX,tempY, cur.value + map[tempY][tempX], cur.count+1));
            }
        }
    }
    static boolean inMap(int x, int y){
        if(x>=0 && y>=0 && x&lt;5 && y&lt;5)
            return true;
        return false;
    }
}

