<problem-name>효율적인 해킹
<blog>https://tussle.tistory.com/125
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
    static List&lt;Integer>[] list;
    static int[] answer;
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        list = new List[N + 1];
        answer = new int[N + 1];
        for (int i = 1; i &lt;= N; i++) {
            list[i] = new ArrayList&lt;>();
        }
        for (int i = 0; i &lt; M; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            int A = Integer.parseInt(st.nextToken());
            int B = Integer.parseInt(st.nextToken());
            list[A].add(B);
        }

        for (int i = 1; i &lt;= N; i++) {
                visited = new boolean[N + 1];
                dfs(i);
        }
        int max = 0;
        for (int i = 1; i &lt;= N; i++) {
            max = Math.max(max, answer[i]);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i &lt;= N; i++) {
            if (answer[i] == max) {
                sb.append(i).append(" ");
            }
        }
        bw.write(sb.toString());
        bw.flush();
        bw.close();
        br.close();
    }
    static void dfs(int idx) {
        visited[idx] = true;
        for(int nxt : list[idx]){
            if(!visited[nxt]){
                answer[nxt]++;
                dfs(nxt);
            }
        }
    }
}