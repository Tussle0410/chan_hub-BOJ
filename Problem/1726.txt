<problem-name>로봇
<blog>https://tussle.tistory.com/1096
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색
<java-code>
import java.io.*;
import java.util.*;


public class Main {
    static class Info implements Comparable&lt;Info>{
        int r, c, cnt, dir;
        Info(int r, int c, int cnt, int dir){
            this.r = r;
            this.c = c;
            this.cnt = cnt;
            this.dir = dir;
        }
        @Override
        public int compareTo(Info o){
            return this.cnt - o.cnt;
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int[][] map = new int[N][M];
        for(int i=0;i&lt;N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j&lt;M;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        int[][] position = new int[2][3];
        for(int i=0;i&lt;2;i++){
            st = new StringTokenizer(br.readLine()," ");
            position[i][0] = Integer.parseInt(st.nextToken()) - 1;
            position[i][1] = Integer.parseInt(st.nextToken()) - 1;
            position[i][2] = setDir(Integer.parseInt(st.nextToken()));
        }
        int result = bfs(map, position, N, M);
        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
        br.close();
    }
    static int bfs(int[][] map, int[][] position, int N, int M){
        PriorityQueue&lt;Info> pq = new PriorityQueue&lt;>();
        int[] dr = {-1, 0, 1, 0};
        int[] dc = {0 , 1, 0, -1};
        boolean[][][] visited = new boolean[N][M][4];
        visited[position[0][0]][position[0][1]][position[0][2]] = true;
        pq.offer(new Info(position[0][0], position[0][1], 0,  position[0][2]));
        while(!pq.isEmpty()){
            Info cur = pq.poll();
            if(cur.r == position[1][0] && cur.c == position[1][1] && cur.dir == position[1][2]){
                return cur.cnt;
            }
            int nr = cur.r;
            int nc = cur.c;
            for(int i=1;i&lt;=3;i++){
                nr += dr[cur.dir];
                nc += dc[cur.dir];
                if(!inSpace(nr, nc, N, M) || map[nr][nc] == 1){
                    break;
                }
                if(visited[nr][nc][cur.dir]){
                    continue;
                }
                visited[nr][nc][cur.dir] = true;
                pq.offer(new Info(nr, nc, cur.cnt + 1, cur.dir));
            }

            int rd = (cur.dir + 1) % 4;
            if(!visited[cur.r][cur.c][rd]){
                visited[cur.r][cur.c][rd] = true;
                pq.offer(new Info(cur.r, cur.c, cur.cnt + 1, rd));
            }
            int ld = (cur.dir - 1) &lt; 0 ? 3 : cur.dir - 1;
            if(!visited[cur.r][cur.c][ld]){
                visited[cur.r][cur.c][ld] = true;
                pq.offer(new Info(cur.r, cur.c, cur.cnt + 1, ld));
            }
        }
        return 0;
    }
    static int setDir(int dir){
        if(dir == 1){
            return 1;
        }else if(dir == 2){
            return 3;
        }else if(dir == 3){
            return 2;
        }else{
            return 0;
        }
    }
    static boolean inSpace(int r, int c, int N, int M){
        if(r >= 0 && c >= 0 && r &lt; N && c &lt; M){
            return true;
        }
        return false;
    }
}