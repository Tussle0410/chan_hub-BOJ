<problem-name>구간 합 구하기
<blog>
<tag>자료 구조, 세그먼트 트리
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.TreeMap;
public class Main {
	static long[] num, tree;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		int size = M + K;
		num = new long[N+1];
		tree = new long[N*4];
		for(int i=1;i&lt;=N;i++)
			num[i] = Long.parseLong(br.readLine());
		init(1, N, 1);

		for(int i=0;i&lt;size;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int command = Integer.parseInt(st.nextToken());
			int a = Integer.parseInt(st.nextToken());
			if(command == 1) {
				long b = Long.parseLong(st.nextToken());
				update(1, N, 1, a, b - num[a]);
				num[a] = b;
			}else {
				int b = Integer.parseInt(st.nextToken());
				bw.write(String.valueOf(sum(1, N, 1, a, b)));
				bw.newLine();
			}
		}
		bw.flush();
		bw.close();
		br.close();
	}

	private static long init(int start, int end, int node) {
		if(start == end)
			return tree[node] = num[start];
		int mid = (start + end)/2;
		return tree[node] = init(start, mid, node*2) + init(mid+1, end, node * 2 + 1);
	}
	private static void update(int start, int end, int node, int index, long val) {
		if(index > end || index &lt; start)
			return;
		tree[node] += val;
		if(start == end)
			return;
		int mid = (start + end)/2;
		update(start, mid, node * 2, index, val);
		update(mid+1, end, node * 2 + 1, index, val);
	}
	private static long sum(int start, int end, int node, int left, int right) {
		if(left > end || right &lt; start)
			return 0;
		if(start >= left && end &lt;= right)
			return tree[node];
		int mid = (start + end) /2;
		return sum(start, mid, node * 2, left, right) + sum(mid+1, end, node * 2 + 1, left, right);
	}
}