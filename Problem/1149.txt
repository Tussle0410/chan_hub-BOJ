<problem-name>RGB거리
<blog>https://tussle.tistory.com/230
<tag>다이나믹 프로그래밍
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int[][] price;
	static int[][] DP;
	static int N;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		N = Integer.parseInt(br.readLine());
		StringTokenizer st;
		price = new int[N][3];
		DP = new int[N][3];
		for(int i=0;i&lt;N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=0;j&lt;3;j++)
				price[i][j] = Integer.parseInt(st.nextToken());
		}
		int result = Integer.MAX_VALUE;

		for(int i=0;i&lt;N;i++)
			Arrays.fill(DP[i], Integer.MAX_VALUE);

		for(int i=0;i&lt;3;i++)
			result = Math.min(result, search(0, i));
		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}
	static int search(int idx, int pos) {
		if(idx == N)
			return 0;

		if(DP[idx][pos] != Integer.MAX_VALUE)
			return DP[idx][pos];

		for(int i=0;i&lt;3;i++) {
			if(pos == i)
				continue;
			DP[idx][pos] = Math.min(DP[idx][pos], search(idx+1, i) + price[idx][i]);
		}
		return DP[idx][pos];
	}
}