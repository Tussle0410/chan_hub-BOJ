<problem-name>네트워크 연결
<blog>
<tag>그래프 이론, 최소 스패닝 트리
<java-code>
import java.io.*;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    static class Line implements Comparable&lt;Line>{
        int a, b, w;
        public Line(int a, int b, int w){
            this.a = a;
            this.b = b;
            this.w = w;
        }

        @Override
        public int compareTo(Line o) {
            return this.w - o.w;
        }
    }
    static int[] parent;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        int result = 0;
        int N = Integer.parseInt(br.readLine());
        int M = Integer.parseInt(br.readLine());
        parent = new int[N+1];
        for(int i=1;i&lt;=N;i++)
            parent[i] = i;
        PriorityQueue&lt;Line> pq = new PriorityQueue&lt;>();
        for(int i=0;i&lt;M;i++){
            st = new StringTokenizer(br.readLine()," ");
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());
            pq.offer(new Line(a, b, w));
        }
        while(!pq.isEmpty()){
            Line cur = pq.poll();
            if(union(cur.a, cur.b))
                result += cur.w;
        }
        System.out.print(result);

    }
    static int find(int a){
        if(parent[a] == a)
            return a;
        return parent[a] = find(parent[a]);
    }
    static boolean union(int a, int b){
        int pa = find(a);
        int pb = find(b);
        if(pa == pb)
            return false;

        parent[pb] = pa;
        return true;
    }
}