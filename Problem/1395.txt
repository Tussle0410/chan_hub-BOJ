<problem-name>스위치
<blog>
<tag>자료 구조, 세그먼트 트리, 느리게 갱신되는 세그먼트 트리
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static boolean[] lazy;
	static int[] tree;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		tree = new int[N &lt;&lt; 2];
		lazy = new boolean[N &lt;&lt; 2];
		for (int i = 0; i &lt; M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int O = Integer.parseInt(st.nextToken());
			int S = Integer.parseInt(st.nextToken());
			int T = Integer.parseInt(st.nextToken());
			if (O == 0) {
				update(1, N, 1, S, T);
			} else {
				bw.write(String.valueOf(getSwitch(1, N, 1, S, T)));
				bw.newLine();
			}
		}
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}

	private static void updateLazy(int start, int end, int node) {
		if (lazy[node]) {
			tree[node] = Math.abs((end - start + 1) - tree[node]);

			if (start != end) {
				lazy[node &lt;&lt; 1] = !lazy[node &lt;&lt; 1];
				lazy[(node &lt;&lt; 1) + 1] = !lazy[(node &lt;&lt; 1) + 1];
			}

			lazy[node] = false;
		}
	}

	private static void update(int start, int end, int node, int left, int right) {
		updateLazy(start, end, node);
		if (start > right || end &lt; left)
			return;
		if (start >= left && end &lt;= right) {
			tree[node] = Math.abs((end - start + 1) - tree[node]);
			if (start != end) {
				lazy[node &lt;&lt; 1] = !lazy[node &lt;&lt; 1];
				lazy[(node &lt;&lt; 1) + 1] = !lazy[(node &lt;&lt; 1) + 1];
			}
			return;
		}
		int mid = (start + end) >> 1;
		update(start, mid, node &lt;&lt; 1, left, right);
		update(mid + 1, end, (node &lt;&lt; 1) + 1, left, right);
		tree[node] = tree[node &lt;&lt; 1] + tree[(node &lt;&lt; 1) + 1];

	}

	private static int getSwitch(int start, int end, int node, int left, int right) {
		updateLazy(start, end, node);
		if (start > right || end &lt; left)
			return 0;
		if (start >= left && end &lt;= right)
			return tree[node];
		int mid = (start + end) >> 1;
		return getSwitch(start, mid, node &lt;&lt; 1, left, right) + getSwitch(mid + 1, end, (node &lt;&lt; 1) + 1, left, right);
	}
}