<problem-name>그림
<blog>https://tussle.tistory.com/1044
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static class Pos{
        int r, c;
        public Pos(int r, int c){
            this.r = r;
            this.c = c;
        }
    }
    static int[][] map;
    static boolean[][] visited;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static int n, m, max_width = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new int[n][m];
        visited = new boolean[n][m];
        for(int i=0;i&lt;n;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j&lt;m;j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }
        int team = 0;
        for(int i=0;i&lt;n;i++){
            for(int j=0;j&lt;m;j++){
                if(map[i][j] == 1 && !visited[i][j]){
                    visited[i][j] = true;
                    bfs(i, j);
                    team++;
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        bw.write(String.valueOf(team));
        bw.newLine();
        bw.write(String.valueOf(max_width));
        bw.flush();
        bw.close();
        br.close();
    }
    static void bfs(int r, int c){
        Queue&lt;Pos> queue = new ArrayDeque&lt;>();
        queue.add(new Pos(r, c));
        int width = 1;
        while(!queue.isEmpty()){
            Pos cur = queue.poll();
            for(int i=0;i&lt;4;i++){
                int tempR = cur.r + dr[i];
                int tempC = cur.c + dc[i];
                if(inSpace(tempR,tempC) && !visited[tempR][tempC] && map[tempR][tempC] == 1){
                    visited[tempR][tempC] = true;
                    queue.add(new Pos(tempR,tempC));
                    width++;
                }
            }
        }
        max_width = Math.max(max_width, width);
    }
    static boolean inSpace(int r, int c){
        if(r >= 0 && c>= 0 && r &lt; n && c &lt; m)
            return true;
        return false;
    }
}