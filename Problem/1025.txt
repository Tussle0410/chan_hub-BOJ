<problem-name>제곱수 찾기
<blog>
<tag>브루트포스 알고리즘
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import java.util.StringTokenizer;

public class Main {
	static int[][] num;
	static HashSet&lt;Integer> set = new HashSet&lt;>();
	static final int MAX_NUM = 31622;
	static int result = -1, N, M;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		num = new int[N][M];

		for (int i = 0; i &lt; N; i++) {
			String str = br.readLine();
			for (int j = 0; j &lt; M; j++)
				num[i][j] = Character.getNumericValue(str.charAt(j));
		}

		for (int i = 0; i &lt;= MAX_NUM; i++)
			set.add(i * i);

		if (set.contains(num[0][0]))
			result = num[0][0];

		for (int i = 0; i &lt; N; i++) {
			for (int j = 0; j &lt; M; j++) {
				if (i == 0 && j == 0)
					continue;
				for (int s = 0; s &lt; N; s++)
					for (int d = 0; d &lt; M; d++)
						searchP(i, j, s, d, 0);
				for (int s = 0; s &lt; N; s++)
					for (int d = 0; d &lt; M; d++)
						searchP(-i, j, s, d, 0);
				for (int s = 0; s &lt; N; s++)
					for (int d = 0; d &lt; M; d++)
						searchP(i, -j, s, d, 0);
				for (int s = 0; s &lt; N; s++)
					for (int d = 0; d &lt; M; d++)
						searchP(-i, -j, s, d, 0);
			}
		}
		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}

	static void searchP(int rowP, int colP, int row, int col, int val) {
		int temp = val * 10 + num[row][col];
		if (set.contains(temp))
			result = Math.max(result, temp);
		int nr = row + rowP;
		int nc = col + colP;
		if (nr &lt; N && nc &lt; M && nr >= 0 && nc >= 0)
			searchP(rowP, colP, nr, nc, temp);
	}

}