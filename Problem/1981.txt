<problem-name>배열에서 이동
<blog>https://tussle.tistory.com/1099
<tag>그래프 이론, 그래프 탐색, 이분 탐색, 너비 우선 탐색
<java-code>
import java.io.*;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static class Info{
        int r, c;
        public Info(int r, int c){
            this.r = r;
            this.c = c;
        }
    }
    static int[][] map;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        int max = -1;
        int min = 201;
        map = new int[N][N];
        for(int i=0;i&lt;N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j = 0;j&lt;N;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                max = Math.max(max, map[i][j]);
                min = Math.min(min, map[i][j]);
            }
        }
        int result = search(max, min, N);
        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
        br.close();
    }
    static int search(int max, int min, int N){
        int start = 0;
        int end = max - min;
        int result = 201;
        while(start &lt;= end){
            int mid = (start + end) / 2;
            boolean flag = false;
            for(int i = min; i+mid &lt;= max; i++){
                int s = i;
                int e = i + mid;
                if(map[0][0] >= s && map[0][0] &lt;= e){
                    if(bfs(s, e, N)){
                        flag = true;
                        break;
                    }
                }
            }
            if(flag){
                end = mid-1;
                result = Math.min(result, mid);
            }else{
                start = mid+1;
            }
        }
        return result;
    }
    static boolean bfs(int s, int e, int N){
        Queue&lt;Info> q = new ArrayDeque&lt;>();
        boolean[][] visited = new boolean[N][N];
        q.add(new Info(0, 0));
        visited[0][0] = true;
        while(!q.isEmpty()){
            Info cur = q.poll();
            if(cur.r == N-1 && cur.c == N-1){
                return true;
            }
            for(int i=0;i&lt;4;i++){
                int nr = cur.r + dr[i];
                int nc = cur.c + dc[i];
                if(inSpace(nr, nc, N) && !visited[nr][nc] && map[nr][nc] >= s && map[nr][nc] &lt;= e){
                    q.add(new Info(nr, nc));
                    visited[nr][nc] = true;
                }
            }
        }
        return false;
    }
    static boolean inSpace(int r, int c, int N){
        if(r >= 0 && r &lt; N && c >= 0 && c &lt; N){
            return true;
        }
        return false;
    }
}
