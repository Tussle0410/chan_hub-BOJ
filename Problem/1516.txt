<problem-name>게임 개발
<blog>
<tag>다이나믹 프로그래밍, 그래프 이론, 위상 정렬, 방향 비순환 그래프
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
public class Main {
	static class Building implements Comparable&lt;Building>{
		int idx, val;
		public Building(int idx, int val) {
			this.idx = idx;
			this.val = val;
		}
		@Override
		public int compareTo(Building o) {
			return this.val - o.val;
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringBuilder sb = new StringBuilder();
		int N = Integer.parseInt(br.readLine());
		StringTokenizer st;
		int[] cnt = new int[N+1];
		List&lt;List&lt;Integer>> graph = new ArrayList&lt;>();
		int[] len = new int[N+1];
		for(int i=0;i&lt;=N;i++)
			graph.add(new ArrayList&lt;>());

		for(int i=1;i&lt;=N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			len[i] = Integer.parseInt(st.nextToken());
			while(true) {
				int p = Integer.parseInt(st.nextToken());
				if(p == -1)
					break;
				cnt[i]++;
				graph.get(p).add(i);
			}
		}

		PriorityQueue&lt;Building> pq = new PriorityQueue&lt;>();
		int[] result = new int[N+1];
		for(int i=1;i&lt;=N;i++)
			if(cnt[i] == 0) {
				result[i] = len[i];
				pq.offer(new Building(i, len[i]));
			}
		while(!pq.isEmpty()) {
			Building cur = pq.poll();
			for(int nxt : graph.get(cur.idx)) {
				cnt[nxt]--;
				if(cnt[nxt] == 0) {
					result[nxt] = cur.val + len[nxt];
					pq.offer(new Building(nxt, result[nxt]));
				}
			}
		}
		for(int i=1;i&lt;=N;i++){
			bw.write(String.valueOf(result[i]));
			bw.newLine();
		}
		bw.flush();
		bw.close();
		br.close();

	}
}