<problem-name>도시 분할 계획
<blog>https://tussle.tistory.com/1012
<tag>그래프 이론, 최소 스패닝 트리
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main {
	static class Node implements Comparable&lt;Node>{
		int A_idx, B_idx, value;
		public Node(int A_idx, int B_idx, int value) {
			this.A_idx = A_idx;
			this.B_idx = B_idx;
			this.value = value;
		}
		@Override
		public int compareTo(Node o) {
			return this.value - o.value;
		}
	}
	static int[] parent;
	static StringBuilder answer = new StringBuilder();
	static ArrayList&lt;Node> road = new ArrayList&lt;>();
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		parent = new int[N+1];

		for(int i=1;i&lt;=N;i++)
			parent[i] = i;


		for(int i=0;i&lt;M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			int C = Integer.parseInt(st.nextToken());
			road.add(new Node(A,B,C));
		}
		Collections.sort(road);
		int sum = 0;
		int max = -1;
		for(Node n : road) {
			if(find(n.A_idx) != find(n.B_idx)) {
				union(n.A_idx, n.B_idx);
				sum += n.value;
				max = Math.max(max, n.value);
			}
		}
		sum -= max;
		bw.write(String.valueOf(sum));
		bw.flush();
		bw.close();
		br.close();

	}
	static int find(int a) {
		if(parent[a] == a)
			return a;
		return parent[a] = find(parent[a]);
	}
	static void union(int a, int b) {
		int pa = find(a);
		int pb = find(b);

		if(pa &lt;= pb)
			parent[pb] = parent[pa];
		else
			parent[pa] = parent[pb];
	}
}
