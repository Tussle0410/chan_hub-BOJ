<problem-name>인터넷 설치
<blog>https://tussle.tistory.com/786
<tag>그래프 이론, 이분 탐색, 최단 경로, 데이크스트라, 매개 변수 탐색
<java-code>
import java.util.*;
import java.io.*;

public class Main {
    static class cable implements Comparable&lt;cable>{
        int next, value;
        public cable(int next, int value) {
            this.next = next;
            this.value = value;
        }

        @Override
        public int compareTo(cable o) {
            return this.value - o.value;
        }
    }
    static int N,P,K;
    static ArrayList&lt;ArrayList&lt;cable>> line = new ArrayList&lt;>();
    static int[] dis;
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        N = Integer.parseInt(st.nextToken());
        P = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        dis = new int[N+1];

        for(int i=0;i&lt;=N;i++)
            line.add(new ArrayList&lt;>());

        int end = Integer.MIN_VALUE;
        int start = 0;
        for(int i=0;i&lt;P;i++){
            st = new StringTokenizer(br.readLine()," ");
            int cur = Integer.parseInt(st.nextToken());
            int next = Integer.parseInt(st.nextToken());
            int value = Integer.parseInt(st.nextToken());
            end = Math.max(end,value);
            line.get(cur).add(new cable(next,value));
            line.get(next).add(new cable(cur,value));
        }

        int answer = Integer.MIN_VALUE;
        while(start&lt;=end){
            int mid = (start + end)/2;
            if(bfs(mid)){
                answer = mid;
                end = mid-1;
            }else
                start = mid+1;
        }
        if(answer == Integer.MIN_VALUE)
            bw.write("-1");
        else
            bw.write(answer + "");
        bw.flush();
        bw.close();
        br.close();
    }
    static boolean bfs(int mid){
        PriorityQueue&lt;cable> pq = new PriorityQueue&lt;>();
        pq.add(new cable(1, 0));
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[1] = 0;
        while(!pq.isEmpty()){
            cable cur = pq.poll();
            int curNode = cur.next;
            int value = cur.value;
            if(dis[curNode] &lt; value)
                continue;
            for(cable next : line.get(curNode)){
                int nextValue = value;
                if(next.value > mid)
                    nextValue++;
                if(nextValue &lt; dis[next.next]){
                    dis[next.next] = nextValue;
                    pq.add(new cable(next.next,nextValue));
                }
            }
        }
        return dis[N]&lt;=K;
    }
}

