<problem-name>안전 영역
<blog>https://tussle.tistory.com/904
<tag>그래프 이론, 브루트포스 알고리즘, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {
    static class Pos{
        int r, c;
        public Pos(int r, int c){
            this.r = r;
            this.c = c;
        }
    }
    static int[][] graph;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static int N;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        StringTokenizer st ;
        Set&lt;Integer> heights = new HashSet&lt;>();
        graph = new int[N][N];
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(int i=0;i&lt;N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j&lt;N;j++){
                graph[i][j] = Integer.parseInt(st.nextToken());
                min = Math.min(min, graph[i][j]);
                max = Math.max(max, graph[i][j]);

            }
        }

        int result = 1;

        for(int height=min;height&lt;=max;height++) {
            int cnt = 0;
            boolean[][] visited = new boolean[N][N];
            for (int i = 0; i &lt; N; i++) {
                for (int j = 0; j &lt; N; j++) {
                    if (!visited[i][j] && graph[i][j] > height) {
                        bfs(i, j, height, visited);
                        cnt++;
                    }
                }
            }
            result = Math.max(result, cnt);
        }
        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
        br.close();
    }
    public static void bfs(int r, int c,  int h, boolean[][] visited){
        Queue&lt;Pos> q = new ArrayDeque&lt;>();
        visited[r][c] = true;
        q.add(new Pos(r, c));
        while(!q.isEmpty()){
                Pos cur = q.poll();

                for(int i=0;i&lt;4;i++){
                    int nr = cur.r + dr[i];
                    int nc = cur.c + dc[i];
                    if(inSpace(nr, nc) && !visited[nr][nc] && graph[nr][nc] > h ){
                        visited[nr][nc] = true;
                        q.add(new Pos(nr, nc));
                    }
                }
        }

    }
    public static boolean inSpace(int r, int c){
        if(r >= 0 && c >= 0 && r &lt; N && c &lt; N){
            return true;
        }
        return false;
    }
}