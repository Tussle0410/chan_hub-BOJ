<problem-name>말이 되고픈 원숭이
<blog>https://tussle.tistory.com/791
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static class Pos implements Comparable&lt;Pos>{
		int r, c, k, v;
		public Pos(int r, int c, int k, int v) {
			this.r = r;
			this.c = c;
			this.k = k;
			this.v = v;
		}
		@Override
		public int compareTo(Pos o) {
			return this.v - o.v;
		}
		@Override
		public String toString() {
			return "Pos [r=" + r + ", c=" + c + ", k=" + k + ", v=" + v + "]";
		}

	}
	static int[][] map;
	static int[] dr = {-1, 1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static int[] nr = {-1, -2, -2, -1, 1, 2, 2, 1};
	static int[] nc = {-2, -1, 1, 2, -2, -1, 1, 2};
	static int W, H;
	static int[][] visited;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		int K = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		W = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());
		map = new int[H][W];
		visited = new int[H][W];
		for(int i=0;i&lt;H;i++) {
			st = new StringTokenizer(br.readLine(), " ");
			Arrays.fill(visited[i], -1);
			for(int j=0;j&lt;W;j++)
				map[i][j] = Integer.parseInt(st.nextToken());
		}

		int result = bfs(K);
		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}
	private static int bfs(int k) {
		PriorityQueue&lt;Pos> q = new PriorityQueue&lt;>();
		visited[0][0] = k;
		q.offer(new Pos(0, 0, k, 0));
		while(!q.isEmpty()) {
			Pos cur = q.poll();
			if(cur.r == H-1 && cur.c == W-1)
				return cur.v;

			for(int i=0;i&lt;4;i++){
				int tempR = cur.r + dr[i];
				int tempC = cur.c + dc[i];
				if(inSpace(tempR,tempC) && map[tempR][tempC] == 0 && visited[tempR][tempC] &lt; cur.k) {
					visited[tempR][tempC] = cur.k;
					q.offer(new Pos(tempR,tempC, cur.k, cur.v + 1));
				}
			}
			if(cur.k > 0) {
				for(int i=0;i&lt;8;i++) {
					int tempR = cur.r + nr[i];
					int tempC = cur.c + nc[i];
					if(inSpace(tempR, tempC) && map[tempR][tempC] == 0 && visited[tempR][tempC] &lt; cur.k-1) {
						visited[tempR][tempC] = cur.k - 1;
						q.offer(new Pos(tempR,tempC, cur.k - 1, cur.v + 1));
					}
				}
			}
		}
		return -1;
	}
	static boolean inSpace(int r, int c) {
		if(r >= 0 && c >= 0 && r &lt; H && c &lt; W)
			return true;
		return false;
	}
}