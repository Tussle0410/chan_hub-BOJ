<problem-name>뱀
<blog>https://tussle.tistory.com/969
<tag>구현, 자료 구조, 시뮬레이션, 덱, 큐
<java-code>
import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
    static class snake{
        int move, y, x, d;
        public snake( int move, int y, int x, int d){
            this.move = move;
            this.y = y;
            this.x = x;
            this.d = d;
        }
    }
    static int[][] board;
    static int[] dy = {-1, 0, 1, 0};
    static int[] dx = {0, 1, 0, -1};
    static int[] directions = new int[10001];
    static Queue&lt;snake> snakes = new LinkedList&lt;>();
    static int N;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        int K = Integer.parseInt(br.readLine());
        StringTokenizer st;
        board = new int[N+1][N+1];
        for(int i=0;i&lt;K;i++){
            st = new StringTokenizer(br.readLine()," ");
            int y = Integer.parseInt(st.nextToken());
            int x = Integer.parseInt(st.nextToken());
            board[y][x] = 2;
        }
        int L = Integer.parseInt(br.readLine());
        for(int i=0;i&lt;L;i++){
            st = new StringTokenizer(br.readLine()," ");
            int X = Integer.parseInt(st.nextToken());
            String C = st.nextToken();
            if(C.equals("L"))
                directions[X] = 1;
            else
                directions[X] = 2;
        }
        snakes.add(new snake(0,1, 1, 1));
        board[1][1] = 1;
        int answer = gameStart();
        bw.write(answer + "");
        bw.flush();
        bw.close();
        br.close();
    }
    static int gameStart(){
        while(true){
            int size = snakes.size();
            boolean eating = false;
            for(int i=0;i&lt;size;i++){
                snake cur = snakes.poll();
                board[cur.y][cur.x] = 0;
                int tempX = cur.x + dx[cur.d];
                int tempY = cur.y + dy[cur.d];
                if(!inSpace(tempY, tempX) || board[tempY][tempX] == 1)
                    return cur.move + 1;
                else{
                    int tempM = cur.move+1;
                    int tempD = cur.d;
                    if(directions[tempM] == 2)
                        tempD = cur.d+1 == 4? 0 : cur.d+1;
                    else if(directions[tempM] == 1)
                        tempD = cur.d-1 == -1? 3 : cur.d-1;
                    snakes.add(new snake(tempM, tempY,tempX, tempD));
                    if(i == 0 && board[tempY][tempX] == 2){
                        eating = true;
                    }
                    if(i == size-1 && eating){
                        board[cur.y][cur.x] = 1;
                        snakes.add(cur);
                    }
                    board[tempY][tempX] = 1;
                }
            }
        }
    }
    static boolean inSpace(int y, int x){
        if(y > 0 && y&lt;=N && x>0 && x&lt;=N)
            return true;
        return false;
    }
}
