<problem-name>DFS와 BFS
<blog>https://tussle.tistory.com/497
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.*;
public class Main {
	static ArrayList&lt;ArrayList&lt;Integer>> graph = new ArrayList&lt;>();
	static StringBuilder sb = new StringBuilder();
	static boolean[] visited;
	static int N;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int V = Integer.parseInt(st.nextToken());
		for(int i=0;i&lt;=N;i++)
			graph.add(new ArrayList&lt;>());
		for(int i=0;i&lt;M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			graph.get(a).add(b);
			graph.get(b).add(a);
		}
		for(int i=1;i&lt;=N;i++)
			Collections.sort(graph.get(i));

		visited = new boolean[N+1];
		dfs(V);
		bw.write(sb.toString());
		bw.newLine();
        sb = new StringBuilder();
		bfs(V);
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}
	static void dfs(int idx) {
		visited[idx] = true;
		sb.append(idx).append(" ");
		for(int nxt : graph.get(idx)) {
			if(visited[nxt])
				continue;
			dfs(nxt);
		}
	}
	static void bfs(int idx) {
		Queue&lt;Integer> q = new ArrayDeque&lt;>();
		visited = new boolean[N+1];
		q.offer(idx);
		visited[idx] = true;
		while(!q.isEmpty()) {
			int cur = q.poll();
			sb.append(cur).append(" ");
			for(int nxt : graph.get(cur)) {
				if(visited[nxt])
					continue;
				visited[nxt] = true;
				q.offer(nxt);
			}
		}
	}

}
