<problem-name>팀배분
<blog>
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색, 이분 그래프
<java-code>
import java.io.*;
import java.util.*;

public class Main {
    static class Person{
        int idx;
        boolean team;
        public Person(int idx, boolean team){
            this.idx = idx;
            this.team = team;
        }
    }
    static List&lt;Integer> white, blue;
    static List&lt;List&lt;Integer>> haters;
    static boolean[] isTeam;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        white = new ArrayList&lt;>();
        blue = new ArrayList&lt;>();
        haters = new ArrayList&lt;>();
        isTeam = new boolean[N + 1];
        for (int i = 0; i &lt;= N; i++) {
            haters.add(new ArrayList&lt;>());
        }
        for (int i = 1; i &lt;= N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            int count = Integer.parseInt(st.nextToken());
            for (int j = 0; j &lt; count; j++) {
                int hater = Integer.parseInt(st.nextToken());
                haters.get(i).add(hater);
            }
        }
        for (int i = 1; i &lt;= N; i++) {
            if (!isTeam[i]) {
                bfs(i);
            }
        }
        Collections.sort(white);
        Collections.sort(blue);
        bw.write(String.valueOf(blue.size()));
        bw.newLine();
        for (int i = 0; i &lt; blue.size(); i++) {
            bw.write(String.valueOf(blue.get(i)));
            bw.write(" ");
        }
        bw.newLine();
        bw.write(String.valueOf(white.size()));
        bw.newLine();
        for (int i = 0; i &lt; white.size(); i++) {
            bw.write(String.valueOf(white.get(i)));
            bw.write(" ");
        }
        bw.flush();
        bw.close();
        br.close();
    }
    static void bfs(int idx){
        Queue&lt;Person> q = new ArrayDeque&lt;>();
        q.add(new Person(idx, false));
        isTeam[idx] = true;
        while(!q.isEmpty()){
            Person cur = q.poll();
            if(!cur.team){
                blue.add(cur.idx);
            }else{
                white.add(cur.idx);
            }
            for(int hater : haters.get(cur.idx)){
                if(!isTeam[hater]){
                    isTeam[hater] =  true;
                    q.add(new Person(hater, !cur.team));
                }
            }


        }

    }
}