<problem-name>색종이 - 2
<blog>
<tag>구현
<java-code>
import java.io.*;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Pos{
		int r, c;
		public Pos(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
	static int[] dr = {-1, 1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static boolean[][] map = new boolean[102][102];
	static boolean[][] visited = new boolean[102][102];
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int N = Integer.parseInt(br.readLine());
		for(int i=0;i&lt;N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int c = Integer.parseInt(st.nextToken());
			int r = Integer.parseInt(st.nextToken());
			for(int j=r;j&lt;r+10;j++) {
				for(int s=c;s&lt;c+10;s++)
					map[j][s] = true;
			}
		}
		int result = 0;
		for(int i=0;i&lt;=101;i++) {
			for(int j=0;j&lt;=101;j++) {
				if(visited[i][j] || map[i][j])
					continue;
				result += bfs(i, j);
			}
		}
		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}
	static int bfs(int r, int c) {
		Queue&lt;Pos> q = new ArrayDeque&lt;>();
		visited[r][c] = true;
		q.offer(new Pos(r,c));
		int result = 0;
		while(!q.isEmpty()) {
			Pos cur = q.poll();
			for(int i=0;i&lt;4;i++) {
				int tempR = cur.r + dr[i];
				int tempC = cur.c + dc[i];
				if(inSpace(tempR,tempC) && !visited[tempR][tempC]) {
					if(map[tempR][tempC])
						result++;
					else {
						q.offer(new Pos(tempR, tempC));
						visited[tempR][tempC] = true;
					}
				}
			}
		}
		return result;
	}
	static boolean inSpace(int r, int c) {
		if(r >=0 && c>=0 && r&lt;102 & c&lt;102)
			return true;
		return false;
	}

}