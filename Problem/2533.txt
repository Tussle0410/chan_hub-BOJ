<problem-name>사회망 서비스(SNS)
<blog>https://tussle.tistory.com/763
<tag>다이나믹 프로그래밍, 트리, 트리에서의 다이나믹 프로그래밍
<java-code>
import java.util.*;
import java.io.*;

public class Main {
    static int N;
    static ArrayList&lt;ArrayList&lt;Integer>> graph = new ArrayList&lt;>();
    static ArrayList&lt;ArrayList&lt;Integer>> tree = new ArrayList&lt;>();
    static int[][] DP;
    static public void  main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        DP = new int[N+1][2];
        for(int i=0;i&lt;=N;i++){
            graph.add(new ArrayList&lt;>());
            tree.add(new ArrayList&lt;>());
        }

        for(int i=0;i&lt;N-1;i++){
            st = new StringTokenizer(br.readLine()," ");
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            graph.get(u).add(v);
            graph.get(v).add(u);
        }
        buildTree(1, 0);
        int rootInclude = search(1, 1);
        int rootNonInclude = search(1, 0);
        if(rootInclude&lt;rootNonInclude)
            bw.write(String.valueOf(rootInclude));
        else
            bw.write(String.valueOf(rootNonInclude));
        bw.flush();
        bw.close();
        br.close();
    }
    static int search(int cur, int check) {
        if (DP[cur][check] != 0)
            return DP[cur][check];
        int result = 0;
        if (check == 1) {
            result +=1 ;
            for (Integer next : tree.get(cur)) {
                int include = search(next, 0);
                int nonInclude = search(next, 1);
                if(include&lt;nonInclude)
                    result += include;
                else
                    result += nonInclude;
            }
        } else {
            for(Integer next : tree.get(cur)){
                result += search(next, 1);
            }
        }
        return DP[cur][check] = result;
    }
    static void buildTree(int cur, int parent){
        for(Integer next : graph.get(cur)){
            if(next!=parent){
                tree.get(cur).add(next);
                buildTree(next, cur);
            }
        }
    }
}
