<problem-name>양
<blog>
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.*;


public class Main {
    static class Info{
        int r, c;
        Info(int r, int c){
            this.r = r;
            this.c = c;
        }
    }
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc  = {0, 0, -1, 1};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int R = Integer.parseInt(st.nextToken());
        int C = Integer.parseInt(st.nextToken());
        char[][] map = new char[R][C];
        boolean[][] visited = new boolean[R][C];
        for(int i=0;i&lt;R;i++){
            String str = br.readLine();
            for(int j=0;j&lt;C;j++){
                map[i][j] = str.charAt(j);
                if(map[i][j] == '#'){
                    visited[i][j] = true;
                }
            }
        }
        int sheep = 0;
        int wolf = 0;
        for(int i=0;i&lt;R;i++){
            for(int j=0;j&lt;C;j++){
                if(visited[i][j]){
                    continue;
                }
                int[] result = bfs(map, visited, i, j, R, C);
                if(result[0] == 0){
                    sheep += result[1];
                }else{
                    wolf += result[1];
                }
            }
        }
        bw.write(String.valueOf(sheep));
        bw.write(" ");
        bw.write(String.valueOf(wolf));
        bw.flush();
        bw.close();
        br.close();
    }
    static int[] bfs(char[][] map, boolean[][] visited, int sr, int sc, int R, int C){
        int[] result = new int[2];
        Queue&lt;Info> q = new ArrayDeque&lt;>();
        q.offer(new Info(sr, sc));
        visited[sr][sc] = true;
        int sheep = 0;
        int wolf = 0;
        if(map[sr][sc] == 'o') {
            sheep++;
        }else if(map[sr][sc] == 'v'){
            wolf++;
        }
        while(!q.isEmpty()){
            Info cur = q.poll();
            for(int i=0;i&lt;4;i++){
                int tempR = cur.r + dr[i];
                int tempC = cur.c + dc[i];
                if(inSpace(tempR,tempC,R,C) && !visited[tempR][tempC]){
                    if(map[tempR][tempC] == 'o'){
                        sheep++;
                    }else if(map[tempR][tempC] == 'v'){
                        wolf++;
                    }
                    visited[tempR][tempC] = true;
                    q.offer(new Info(tempR, tempC));
                }
            }
        }
        if(sheep > wolf) {
            result[1] = sheep;
        }else{
            result[0] = 1;
            result[1] = wolf;
        }
        return result;
    }
    static boolean inSpace(int r, int c, int R, int C){
        if(r >= 0 && c > 0 && r &lt; R && c &lt; C){
            return true;
        }
        return false;
    }
}