<problem-name>알고스팟
<blog>https://tussle.tistory.com/693
<tag>그래프 이론, 그래프 탐색, 최단 경로, 데이크스트라, 0-1 너비 우선 탐색
<java-code>
import java.io.*;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Info implements Comparable&lt;Info>{
		int r, c, b;
		public Info(int r, int c, int b) {
			this.r = r;
			this.c = c;
			this.b = b;
		}
		@Override
		public int compareTo(Info o) {
			return this.b - o.b;
		}
	}
	static int[][] map;
	static int[] dr = {-1, 1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static final int INF = Integer.MAX_VALUE;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        map = new int[M][N];
        for(int i=0;i&lt;M;i++) {
        	String str = br.readLine();
        	for(int j=0;j&lt;N;j++)
        		map[i][j] = Character.getNumericValue(str.charAt(j));
        }
        bw.write(String.valueOf(bfs(M,N)));
        bw.flush();
        bw.close();
        br.close();
	}
    static int bfs(int N, int M) {
    	PriorityQueue&lt;Info> q = new PriorityQueue&lt;>();
    	boolean[][] visited = new boolean[N][M];
    	visited[0][0] = true;
    	q.add(new Info(0, 0, 0));
    	while(!q.isEmpty()) {
    		Info cur = q.poll();
    		if(cur.r == N-1 && cur.c == M-1) {
    			return cur.b;
    		}
    		for(int i=0;i&lt;4;i++) {
    			int tempR = cur.r + dr[i];
    			int tempC = cur.c + dc[i];
    			if(inSpace(tempR, tempC, N, M) && !visited[tempR][tempC]) {
    				visited[tempR][tempC] = true;
    				if(map[tempR][tempC] == 1)
    					q.add(new Info(tempR, tempC, cur.b+1));
    				else
    					q.add(new Info(tempR,tempC, cur.b));
    			}
    		}
    	}

    	return -1;
    }
    static boolean inSpace(int r, int c, int N, int M) {
    	if(r >= 0 && c >= 0 && r &lt; N && c &lt; M)
    		return true;
    	return false;
    }
}