<problem-name>오목
<blog>
<tag>구현, 브루트포스 알고리즘
<java-code>
import java.io.*;

import java.util.*;

public class Main {
    static int[][] arr;
    static final int SIZE = 19;
    static int[] dr = {-1 ,0, 1, 1};
    static int[] dc = {1, 1, 0, 1};
    static boolean[][][] visited;
    static int result = -1;
    static int r, c;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        arr = new int[SIZE][SIZE];
        visited = new boolean[SIZE][SIZE][4];
        StringTokenizer st;
        for(int i=0;i&lt;SIZE;i++){
            st = new StringTokenizer(br.readLine(), " ");
            for(int j=0;j&lt;SIZE;j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int j=0;j&lt;SIZE;j++){
            for(int i=0;i&lt;SIZE;i++){
                if(result != -1)
                    break;
                if(arr[i][j] == 0)
                    continue;
                for(int d=0;d&lt;4;d++){
                    int tempR = i + dr[d];
                    int tempC = j + dc[d];
                    if(!inSpace(tempR,tempC) || visited[tempR][tempC][d] || arr[tempR][tempC] != arr[i][j])
                        continue;
                    visited[tempR][tempC][d] = true;
                    search(tempR,tempC, d, 2, arr[i][j]);
                    if(result != -1) {
                        r = i+1;
                        c = j+1;
                        break;
                    }
                }
            }
            if(result != -1)
                break;
        }
        if(result == -1){
            bw.write("0");
        }else{
            bw.write(String.valueOf(result));
            bw.newLine();
            bw.write(String.format("%d %d", r, c));
        }
        bw.flush();
        bw.close();
        br.close();
    }
    static void search(int row, int col, int direction, int cnt, int color){
        int tempR = row + dr[direction];
        int tempC = col + dc[direction];
        if(!inSpace(tempR,tempC) || arr[tempR][tempC] != color || visited[tempR][tempC][direction]) {
            if(cnt == 5)
                result = color;
            return;
        }
        visited[tempR][tempC][direction] = true;
        search(tempR,tempC,direction,cnt+1,color);
    }
    static boolean inSpace(int r, int c){
        return r >= 0 && r &lt; SIZE && c >= 0 && c &lt; SIZE;
    }
}