<problem-name>임계경로
<blog>
<tag>그래프 이론, 그래프 탐색, 위상 정렬, 방향 비순환 그래프
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Road{
		int idx;
		int dis;
		public Road(int idx, int dis) {
			this.idx = idx;
			this.dis = dis;
		}
	}
	static List&lt;List&lt;Road>> graph = new ArrayList&lt;>();
	static int[] dis, cnt;
	static List&lt;Integer>[] parent;
	static int count = 0;
	static boolean[][] visited;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		int n = Integer.parseInt(br.readLine());
		int m = Integer.parseInt(br.readLine());

		parent = new List[n+1];
		dis = new int[n+1];
		cnt = new int[n+1];
		visited = new boolean[n+1][n+1];

		for(int i=0;i&lt;=n;i++) {
			graph.add(new ArrayList&lt;>());
			parent[i] = new ArrayList&lt;>();
		}

		for(int i=0;i&lt;m;i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			graph.get(a).add(new Road(b, c));
			cnt[b]++;
		}
		st = new StringTokenizer(br.readLine(), " ");
		int start = Integer.parseInt(st.nextToken());
		int end = Integer.parseInt(st.nextToken());
		Queue&lt;Road> q = new ArrayDeque&lt;>();
		q.offer(new Road(start, 0));
		while(!q.isEmpty()) {
			Road cur = q.poll();
			for(Road nxt : graph.get(cur.idx)) {
				cnt[nxt.idx]--;
				int temp = cur.dis + nxt.dis;
				if(dis[nxt.idx] &lt; temp) {
					parent[nxt.idx].clear();
					parent[nxt.idx].add(cur.idx);
					dis[nxt.idx] = temp;
				}else if(dis[nxt.idx]== temp)
					parent[nxt.idx].add(cur.idx);

				if(cnt[nxt.idx] == 0)
					q.offer(new Road(nxt.idx, dis[nxt.idx]));
			}
		}
		int result = dis[end];
		search(start, end);
		bw.write(String.valueOf(result));
		bw.newLine();
		bw.write(String.valueOf(count));
		bw.flush();
		bw.close();
		br.close();

	}
	private static void search(int start, int cur) {
		if(cur == start)
			return;

		for(int nxt : parent[cur]) {
			if(!visited[cur][nxt]) {
				visited[cur][nxt] = true;
				count++;
				search(start, nxt);
			}
		}
	}
}