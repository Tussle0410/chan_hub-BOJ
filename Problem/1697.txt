<problem-name>숨바꼭질
<blog>https://tussle.tistory.com/555
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색
<java-code>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int min, M;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		if(N >= M)
			min = N - M;
		else
			min = bfs(N);
		System.out.print(min);
	}
	static int bfs(int N) {
		Queue&lt;Integer> q = new ArrayDeque&lt;>();
		boolean[] visited = new boolean[M * 2];
		visited[N] = true;
		q.offer(N);
		int t = 0;
		while(!q.isEmpty()) {
			int size = q.size();
			for(int i=0;i&lt;size;i++) {
				int cur = q.poll();
				if(cur == M)
					return t;

				if(cur &lt;&lt; 1 &lt; M &lt;&lt; 1 && !visited[cur &lt;&lt; 1]) {
					q.offer(cur &lt;&lt; 1);
					visited[cur &lt;&lt; 1] = true;
				}
				if(cur > 0 && !visited[cur - 1]) {
					q.offer(cur - 1);
					visited[cur-1] = true;
				}
				if(cur &lt; M && !visited[cur + 1]) {
					q.offer(cur + 1);
					visited[cur + 1] = true;
				}
			}
			t++;
		}
		return -1;
	}

}