<problem-name>이분 그래프
<blog>https://tussle.tistory.com/576
<tag>그래프 이론, 탐색, 너비 우선 탐색, 깊이 우선 탐색, 이분 그래프
<java-code>
import java.io.*;
import java.util.*;
public class Main{
	public static int K,V,E;
	public static String result;
	public static int[] set;
	public static ArrayList&lt;ArrayList&lt;Integer>> graph;
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    	StringTokenizer st;
    	K = Integer.parseInt(br.readLine());
    	for(int i=0;i&lt;K;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		V = Integer.parseInt(st.nextToken());
    		E = Integer.parseInt(st.nextToken());
    		set = new int[V+1];
    		graph = new ArrayList&lt;>();
    		result = "YES";
    		for(int j=0;j&lt;=V;j++)
    			graph.add(new ArrayList&lt;>());

    		for(int j=0;j&lt;E;j++) {
    			st = new StringTokenizer(br.readLine()," ");
    			int row = Integer.parseInt(st.nextToken());
    			int col = Integer.parseInt(st.nextToken());
    			graph.get(row).add(col);
    			graph.get(col).add(row);
    		}
    		for(int j=1;j&lt;=V;j++) {
    			if(set[j] == 0) {
        			if(!bfs(j)) {
        				result = "NO";
        				break;
        			}
    			}
    		}
    		bw.write(String.valueOf(result));
    		bw.newLine();
    	}
    	bw.flush();
    	bw.close();
    	br.close();
    }
    public static boolean bfs(int point) {
    	Queue&lt;Integer> queue = new LinkedList&lt;Integer>();
    	queue.add(point);
    	set[point] = 1;
    	while(!queue.isEmpty()) {
    		int p = queue.poll();
    		for(Integer value : graph.get(p)) {
    			if(set[value] == set[p]) {
    				return false;
    			}
    			if(set[value]==0) {
    				set[value] = set[p] * -1;
    				queue.add(value);
    			}
    		}
    	}
    	return true;
    }
}