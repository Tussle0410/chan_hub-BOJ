<problem-name>탈출
<blog>
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Pos {
		int r, c;
		boolean dochi;

		public Pos(int r, int c, boolean dochi) {
			this.r = r;
			this.c = c;
			this.dochi = dochi;
		}

		@Override
		public String toString() {
			return "Pos [r=" + r + ", c=" + c + ", dochi=" + dochi + "]";
		}
	}

	static char[][] map;
	static boolean[][] visited;
	static int sr, sc, R, C;
	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };
	static List&lt;Pos> waters = new ArrayList&lt;>();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		map = new char[R][C];
		visited = new boolean[R][C];
		for (int i = 0; i &lt; R; i++) {
			String str = br.readLine();
			for (int j = 0; j &lt; C; j++) {
				map[i][j] = str.charAt(j);
				if (map[i][j] == 'S') {
					sr = i;
					sc = j;
				} else if (map[i][j] == '*') {
					waters.add(new Pos(i, j, false));
					map[i][j] = '.';
				}

			}
		}
		int result = bfs();
		if(result == -1)
			bw.write("KAKTUS");
		else
			bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();

	}

	private static int bfs() {
		Queue&lt;Pos> q = new ArrayDeque&lt;>();

		for (Pos water : waters) {
			q.offer(water);
			visited[water.r][water.c] = true;
		}
		q.offer(new Pos(sr, sc, true));
		visited[sr][sc] = true;
		int result = 0;
		boolean flag = false;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i &lt; size; i++) {
				Pos cur = q.poll();
				if (cur.dochi && map[cur.r][cur.c] == 'D') {
					flag = true;
					break;
				}
				for (int j = 0; j &lt; 4; j++) {
					int tempR = cur.r + dr[j];
					int tempC = cur.c + dc[j];
					if (inSpace(tempR, tempC) && map[tempR][tempC] != 'X'
							&& !visited[tempR][tempC]) {
						if(!cur.dochi && map[tempR][tempC] == 'D')
							continue;

						visited[tempR][tempC] = true;
						q.offer(new Pos(tempR, tempC, cur.dochi));
					}
				}
			}
			if (flag)
				break;
			result++;
		}
		if (!flag)
			return -1;
		return result;
	}

	private static boolean inSpace(int r, int c) {
		if (r >= 0 && c >= 0 && r &lt; R && c &lt; C)
			return true;
		return false;
	}
}