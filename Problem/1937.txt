<problem-name>욕심쟁이 판다
<blog>
<tag>다이나믹 프로그래밍, 그래프 이론, 그래프 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static int[][] DP;
    static int result = -1, N;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        map = new int[N][N];
        DP =  new int[N][N];
        for(int i=0;i&lt;N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j&lt;N;j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }
        for(int i=0;i&lt;N;i++){
            for(int j=0;j&lt;N;j++) {
                if(DP[i][j] == 0)
                    result = Math.max(search(i, j), result);
            }
        }
        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
        br.close();
    }
    static int search(int r, int c){
        if(DP[r][c] != 0)
            return DP[r][c];

        DP[r][c] = 1;
        for(int i=0;i&lt;4;i++){
            int tempR = r + dr[i];
            int tempC = c + dc[i];
            if(inSpace(tempR, tempC) && map[tempR][tempC] > map[r][c])
                DP[r][c] = Math.max(DP[r][c], search(tempR, tempC) + 1);
        }
        return DP[r][c];
    }
    static boolean inSpace(int r, int c){
        if(r >=0 && c >= 0 && r &lt; N && c &lt; N)
            return true;
        return false;
    }
}