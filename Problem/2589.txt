<problem-name>보물섬
<blog>https://tussle.tistory.com/905
<tag>그래프 이론, 브루트포스 알고리즘, 그래프 탐색, 너비 우선 탐색
<java-code>
import java.io.*;
import java.util.*;


public class Main {
    static class position{
        int x, y, count;
        public position(int x, int y, int count){
            this.x = x;
            this.y = y;
            this.count = count;
        }
    }
    static int L,W, max = Integer.MIN_VALUE;
    static char[][] map;
    static boolean[][] visited;
    static int[] dx = {0, 0, -1, 1};
    static int[] dy = {-1, 1, 0, 0};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        L = Integer.parseInt(st.nextToken());
        W = Integer.parseInt(st.nextToken());
        map = new char[L][W];
        for(int i=0;i&lt;L;i++){
            String str = br.readLine();
            for(int j=0;j&lt;W;j++)
                map[i][j] = str.charAt(j);
        }
        for(int i=0;i&lt;L;i++){
            for(int j=0;j&lt;W;j++){
                if(map[i][j] == 'L')
                    bfs(i, j);
            }
        }
        bw.write(max + "");
        bw.flush();
        bw.close();
        br.close();
    }
    static void bfs(int y, int x){
        Queue&lt;position> q = new LinkedList&lt;>();
        visited = new boolean[L][W];
        visited[y][x] = true;
        int count = 0;
        q.add(new position(x, y, 0));
        while(!q.isEmpty()){
            position cur = q.poll();
            boolean check = false;
            for(int i=0;i&lt;4;i++){
                int tempX = dx[i] + cur.x;
                int tempY = dy[i] + cur.y;
                if(inSpace(tempX,tempY) && !visited[tempY][tempX] && map[tempY][tempX]== 'L'){
                    visited[tempY][tempX] = true;
                    q.add(new position(tempX,tempY, cur.count+1));
                    check = true;
                }
            }
            if(!check)
                count = Math.max(cur.count,  count);
        }
        max = Math.max(max, count);
    }
    static boolean inSpace(int x, int y){
        if(x>=0 && y>=0 && x&lt;W && y&lt;L)
            return true;
        return false;
    }
}