<problem-name>다리 만들기
<blog>
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색
<java-code>
import java.io.*;
import java.util.*;

public class Main {
    static class Pos {
        int r, c;

        public Pos(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }
    static int[][] map;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static int len = Integer.MAX_VALUE;
    static int N;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        map = new int[N][N];
        for (int i = 0; i &lt; N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            for (int j = 0; j &lt; N; j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }
        int islandIndex = 2;
        for (int i = 0; i &lt; N; i++) {
            for (int j = 0; j &lt; N; j++) {
                if (map[i][j] == 1)
                    islandCheck(i, j, islandIndex++);
            }
        }
        for(int i=0;i&lt;N;i++){
            for(int j=0;j&lt;N;j++){
                if(map[i][j] > 1)
                    lenSearch(i, j);
            }
        }
        bw.write(String.valueOf(len-1));
        bw.flush();
        bw.close();
        br.close();
    }

    static void islandCheck(int r, int c, int islandIndex) {
        Queue&lt;Pos> q = new ArrayDeque&lt;>();
        q.offer(new Pos(r, c));
        map[r][c] = islandIndex;
        while (!q.isEmpty()) {
            Pos cur = q.poll();
            for (int i = 0; i &lt; 4; i++) {
                int tempR = cur.r + dr[i];
                int tempC = cur.c + dc[i];
                if (inSpace(tempR, tempC) && map[tempR][tempC] == 1) {
                    map[tempR][tempC] = islandIndex;
                    q.offer(new Pos(tempR, tempC));
                }
            }
        }
    }
    static void lenSearch(int r, int c){
        Queue&lt;Pos> q = new ArrayDeque&lt;>();
        boolean[][] visited = new boolean[N][N];
        visited[r][c] = true;
        int result = 0;
        q.offer(new Pos(r, c));
        while(!q.isEmpty()){
            int size = q.size();
            if(result >= len)
                return;
            for(int i=0;i&lt;size;i++){
                Pos cur = q.poll();
                if(map[cur.r][cur.c] > 1 && map[cur.r][cur.c] != map[r][c]){
                    len = result;
                    return;
                }
                for(int j=0;j&lt;4;j++){
                    int tempR = cur.r + dr[j];
                    int tempC = cur.c + dc[j];
                    if(inSpace(tempR,tempC) && map[tempR][tempC] != map[r][c] && !visited[tempR][tempC]){
                       visited[tempR][tempC] = true;
                       q.offer(new Pos(tempR,tempC));
                    }
                }
            }
            result++;
        }

    }
    static boolean inSpace(int r, int c){
        if(r >= 0 && c >= 0 && r &lt; N && c &lt; N)
            return true;
        return false;
    }
}