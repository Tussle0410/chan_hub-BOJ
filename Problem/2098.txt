<problem-name>외판원 순회
<blog>
<tag>다이나믹 프로그래밍, 비트마스킹, 비트필드를 이용한 다이나믹 프로그래밍, 외판원 순회 문제
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	static int[][] arr,DP;
	static int result, fullMask, N;
	static final int INF = 10000001;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		N = Integer.parseInt(br.readLine());
		StringTokenizer st;
		arr = new int[N][N];
		fullMask = (1 &lt;&lt; N) - 1;
		DP = new int[N][fullMask + 1];
		for(int i=0;i&lt;N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=0;j&lt;N;j++)
				arr[i][j] = Integer.parseInt(st.nextToken());
		}
		int result = Integer.MAX_VALUE;

		result = search(0, 1, 0);

		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}
	private static int search(int idx, int mask, int start) {

		if(mask == fullMask) {
			if(arr[idx][start] == 0)
				return INF;
			return arr[idx][start];
		}



		if(DP[idx][mask] != 0)
			return DP[idx][mask];


		DP[idx][mask] = INF;
		for(int i=0;i&lt;N;i++) {
			if((arr[idx][i] == 0) || ((mask & (1 &lt;&lt; i)) != 0))
				continue;

			DP[idx][mask] = Math.min(DP[idx][mask], search(i, mask | (1&lt;&lt;i) , start) + arr[idx][i]);
		}

		return DP[idx][mask];
	}
}