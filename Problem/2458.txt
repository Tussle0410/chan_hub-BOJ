<problem-name>키 순서
<blog>
<tag>그래프 이론, 그래프 탐색, 깊이 우선 탐색, 최단 경로, 플로이드–워셜
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
	static List&lt;List&lt;Integer>> graph = new ArrayList&lt;>();
	static int[] cnt;
	static boolean[] visited;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			for(int i=0;i&lt;=N;i++)
				graph.add(new ArrayList&lt;>());
			cnt = new int[N+1];
			for(int i=0;i&lt;M;i++) {
				st = new StringTokenizer(br.readLine()," ");
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				graph.get(a).add(b);
			}
			for(int i=1;i&lt;=N;i++) {
				visited = new boolean[N+1];
				visited[i] = true;
				cnt[i] += search(i);
			}
			int result = 0;
			for(int i=1;i&lt;=N;i++) {
				if(cnt[i] == N)
					result++;
			}
			bw.write(String.valueOf(result));
			bw.newLine();
			graph.clear();

		bw.flush();
		bw.close();
		br.close();

	}
	private static int search(int cur) {
		int count = 1;
		for(int nxt : graph.get(cur)) {
			if(visited[nxt])
				continue;
			cnt[nxt]++;
			visited[nxt] = true;
			count += search(nxt);
		}

		return count;
	}

}