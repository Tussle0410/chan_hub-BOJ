<problem-name>우수 마을
<blog>https://tussle.tistory.com/765
<tag>다이나믹 프로그래밍, 트리, 트리에서의 다이나믹 프로그래밍
<java-code>
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int[] population;
	static ArrayList&lt;ArrayList&lt;Integer>> tree = new ArrayList&lt;>();
	static int[][] DP;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        population = new int[N+1];
        DP = new int[N+1][2];
        StringTokenizer st = new StringTokenizer(br.readLine()," ");

        for(int i=1;i&lt;=N;i++)
        	population[i] = Integer.parseInt(st.nextToken());

        for(int i=0;i&lt;=N;i++) {
        	tree.add(new ArrayList&lt;>());
        	Arrays.fill(DP[i], -1);
        }
        for(int i=1;i&lt;N;i++) {
        	st = new StringTokenizer(br.readLine()," ");
        	int a = Integer.parseInt(st.nextToken());
        	int b = Integer.parseInt(st.nextToken());
        	tree.get(a).add(b);
        	tree.get(b).add(a);
        }

        dfs(1, 0, 0);
        dfs(1, 1, 0);
        int result = Math.max(DP[1][0], DP[1][1]);
        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
        br.close();

    }
	private static int dfs(int idx, int select, int p) {
		if(DP[idx][select] != -1)
			return DP[idx][select];
		if(select == 1) {
			DP[idx][select] = population[idx];
			for(int nxt : tree.get(idx)) {
				if(nxt == p)
					continue;
				DP[idx][select] += dfs(nxt, 0, idx);
			}
		}else {
			DP[idx][select] = 0;
			for(int nxt : tree.get(idx)) {
				if(nxt == p)
					continue;
				DP[idx][select] += Math.max(dfs(nxt, 1, idx), dfs(nxt,0,idx));
			}
		}

		return DP[idx][select];
	}
}