<problem-name>같은 수로 만들기
<blog>https://tussle.tistory.com/1165
<tag>자료 구조, 그리디 알고리즘, 스택
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int n = Integer.parseInt(br.readLine());
        BigInteger result = new BigInteger("0");
        Stack&lt;Integer> stack = new Stack&lt;>();
        int max = 0;
        for(int i=0;i&lt;n;i++){
            int num = Integer.parseInt(br.readLine());
            max = Math.max(max, num);
            if(stack.isEmpty()){
                stack.push(num);
                continue;
            }

            if(stack.peek() &lt; num){
                BigInteger val = calculate(stack, num);
                result = result.add(val);
            }
            stack.push(num);
        }
        result = result.add(calculate(stack, max));
        bw.write(result.toString());
        bw.flush();
        bw.close();
        br.close();
    }
    public static BigInteger calculate(Stack&lt;Integer> stack, int num){
        BigInteger result = new BigInteger("0");
        while(!stack.isEmpty() && stack.peek() &lt; num){
            int peek = stack.pop();
            int nxtPeek = stack.isEmpty() ? num : Math.min(stack.peek(), num);
            result = result.add(BigInteger.valueOf(nxtPeek).subtract(BigInteger.valueOf(peek)));
        }
        return result;
    }
}
