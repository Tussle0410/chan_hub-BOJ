<problem-name>행성 터널
<blog>https://tussle.tistory.com/753
<tag>그래프 이론, 정렬, 최소 스패닝 트리
<java-code>
import java.io.*;
import java.util.*;

public class Main{
	static class coordinate{
		int n, x, y, z;
		public coordinate(int n, int x, int y, int z) {
			super();
			this.n = n;
			this.x = x;
			this.y = y;
			this.z = z;
		}
	}
	static class tunnel{
		int p1, p2, width;
		public tunnel(int p1, int p2, int width) {
			super();
			this.p1 = p1;
			this.p2 = p2;
			this.width = width;
		}
	}
	static int N;
	static coordinate[] planet;
	static ArrayList&lt;tunnel> line = new ArrayList&lt;>();
	static int[] root;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		planet = new coordinate[N];
		root = new int[N];
		for(int i=0;i&lt;N;i++)
			root[i] = i;
		for(int i=0;i&lt;N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int z = Integer.parseInt(st.nextToken());
			planet[i] = new coordinate(i, x, y, z);
		}
		sortX();
		for(int i=0;i&lt;N-1;i++)
			line.add(new tunnel(planet[i].n, planet[i+1].n, Math.abs(planet[i].x-planet[i+1].x)));

		sortY();
		for(int i=0;i&lt;N-1;i++)
			line.add(new tunnel(planet[i].n, planet[i+1].n, Math.abs(planet[i].y-planet[i+1].y)));

		sortZ();
		for(int i=0;i&lt;N-1;i++)
			line.add(new tunnel(planet[i].n, planet[i+1].n, Math.abs(planet[i].z-planet[i+1].z)));

		sortTunnel();
		long result = 0;
		for(int i=0;i&lt;line.size();i++) {
			if(!union(line.get(i).p1, line.get(i).p2)) {
				result += line.get(i).width;
			}
		}
		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}
	static int find(int n) {
		if(n==root[n])
			return n;
		return root[n] = find(root[n]);
	}
	static boolean union(int a, int b) {
		int x = find(a);
		int y = find(b);
		if(x!=y) {
			if(x>y)
				root[x] = y;
			else
				root[y] = x;
			return false;
		}
		return true;
	}
	static void sortX() {
		Arrays.sort(planet, new Comparator&lt;coordinate>(){
			@Override
			public int compare(coordinate o1, coordinate o2) {
				return o1.x - o2.x;
			}
		});
	}
	static void sortY() {
		Arrays.sort(planet, new Comparator&lt;coordinate>(){
			@Override
			public int compare(coordinate o1, coordinate o2) {
				return o1.y - o2.y;
			}
		});
	}
	static void sortZ() {
		Arrays.sort(planet, new Comparator&lt;coordinate>(){
			@Override
			public int compare(coordinate o1, coordinate o2) {
				return o1.z - o2.z;
			}
		});
	}
	static void sortTunnel() {
		Collections.sort(line,new Comparator&lt;tunnel>() {
			@Override
			public int compare(tunnel o1, tunnel o2) {
				return o1.width - o2.width;
			}
		});
	}
}