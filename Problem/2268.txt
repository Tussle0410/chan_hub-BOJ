<problem-name>수들의 합 7
<blog>
<tag>자료 구조, 세그먼트 트리
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	static long[] num,tree;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		num = new long[N+1];
		tree = new long[N&lt;&lt;2];
		for(int i=0;i&lt;M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			if(a == 0) {
				long result;
				if(b > c)
					result = sum(1, N, 1, c, b);
				else
					result = sum(1, N, 1, b, c);
				bw.write(String.valueOf(result));
				bw.newLine();
			}else {
				update(1, N, 1, b, c - num[b]);
				num[b] = c;
			}
		}
		bw.flush();
		bw.close();
		br.close();
	}
	private static void update(int start, int end, int node, int index, long val) {
		if(index &lt; start || index > end)
			return;
		tree[node] += val;
		if(start == end)
			return;
		int mid = (start + end) >> 1;
		update(start, mid, node&lt;&lt;1, index, val);
		update(mid+1, end, (node&lt;&lt;1) + 1, index, val);

	}
	private static long sum(int start, int end, int node, int left, int right) {
		if(start > right || end &lt; left)
			return 0;
		if(start >= left && end &lt;= right)
			return tree[node];
		int mid = (start + end) >> 1;
		return sum(start,mid,node&lt;&lt;1, left, right) + sum(mid+1, end, (node&lt;&lt;1)+1, left, right);
	}
}