<problem-name>내려가기
<blog>https://tussle.tistory.com/997
<tag>다이나믹 프로그래밍, 슬라이딩 윈도우
<java-code>
import java.io.*;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        int[][] score = new int[N][3];
        int[][] minDP = new int[3][N];
        int[][] maxDP = new int[3][N];
        for(int i=0;i&lt;N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j&lt;3;j++)
                score[i][j] = Integer.parseInt(st.nextToken());
        }
        minDP[0][0] = maxDP[0][0] = score[0][0];
        minDP[1][0] = maxDP[1][0] = score[0][1];
        minDP[2][0] = maxDP[2][0] = score[0][2];
        for(int i=1;i&lt;N;i++){
            maxDP[0][i] = Math.max(maxDP[0][i-1], maxDP[1][i-1]) + score[i][0];
            maxDP[1][i] = Math.max(maxDP[0][i-1], Math.max(maxDP[1][i-1], maxDP[2][i-1])) + score[i][1];
            maxDP[2][i] = Math.max(maxDP[1][i-1], maxDP[2][i-1]) + score[i][2];

            minDP[0][i] = Math.min(minDP[0][i-1], minDP[1][i-1]) + score[i][0];
            minDP[1][i] = Math.min(minDP[0][i-1], Math.min(minDP[1][i-1], minDP[2][i-1])) + score[i][1];
            minDP[2][i] = Math.min(minDP[1][i-1], minDP[2][i-1]) + score[i][2];
        }
        int max = Math.max(maxDP[0][N-1], Math.max(maxDP[1][N-1] , maxDP[2][N-1]));
        int min = Math.min(minDP[0][N-1], Math.min(minDP[1][N-1] , minDP[2][N-1]));
        bw.write(max + " " + min);
        bw.flush();
        bw.close();
        br.close();
    }
}