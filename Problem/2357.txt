<problem-name>최솟값과 최댓값
<blog>
<tag>자료 구조, 세그먼트 트리
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int[] num;
	static int[][] tree;
	static int min, max;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		num = new int[N+1];
		tree = new int[N&lt;&lt;2][2];
		for(int i=1;i&lt;=N;i++)
			num[i] = Integer.parseInt(br.readLine());
		init(1, N, 1);
		for(int i=0;i&lt;M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			min = Integer.MAX_VALUE;
			max = Integer.MIN_VALUE;
			compare(1, N, 1, a, b);
			bw.write(String.format("%d %d", min, max));
			bw.newLine();
		}
		bw.flush();
		bw.close();
		br.close();
	}
	private static void compare(int start, int end, int node, int left, int right) {
		if(start > right || end &lt; left)
			return;

		if(start >= left && end &lt;= right) {
			min = Math.min(tree[node][0], min);
			max = Math.max(tree[node][1], max);
			return;
		}

		int mid = (start + end) >> 1;
		compare(start, mid, node&lt;&lt;1, left, right);
		compare(mid+1, end, (node&lt;&lt;1) + 1, left, right);
		}
	static void init(int start, int end, int node) {
		if(start == end) {
			tree[node][0] = tree[node][1] = num[start];
			return;
		}
		int mid = (start + end) >> 1;
		init(start, mid, node &lt;&lt; 1);
		init(mid + 1, end, (node &lt;&lt; 1) + 1);
		tree[node][0] = Math.min(tree[node&lt;&lt;1][0], tree[(node&lt;&lt;1) + 1][0]);
		tree[node][1] = Math.max(tree[node&lt;&lt;1][1], tree[(node&lt;&lt;1) + 1][1]);
	}
}