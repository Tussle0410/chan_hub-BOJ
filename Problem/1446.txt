<problem-name>지름길
<blog>
<tag>다이나믹 프로그래밍, 그래프 이론, 최단 경로, 데이크스트라
<java-code>
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
public class Main {
	static class Info implements Comparable&lt;Info>{
		int s, e, val;
		public Info(int s, int e, int val) {
			this.s = s;
			this.e = e;
			this.val = val;
		}
		@Override
		public int compareTo(Info o) {
			return this.s - o.s;
		}
	}
	static int result = Integer.MAX_VALUE;
	static int N,M;
	static List&lt;Info> list;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		list = new ArrayList&lt;>();
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		for(int i=0;i&lt;N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int val = Integer.parseInt(st.nextToken());
			if(e > M)
				continue;
			list.add(new Info(s, e, val));
		}
		Collections.sort(list);
		int size = list.size();
		search(0, size, 0, 0);
		bw.write(String.valueOf(result));
		bw.flush();
		bw.close();
		br.close();
	}
	static void search(int cur, int size, int idx,  int val) {
		if(idx == size) {
			val += (M-cur);
			result = Math.min(result, val);
			return;
		}
		Info temp = list.get(idx);
		if(cur &lt;= temp.s)
			search(temp.e, size, idx+1, val + (temp.s - cur) + temp.val);
		search(cur, size, idx+1, val);
	}
}