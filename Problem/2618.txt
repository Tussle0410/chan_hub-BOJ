<problem-name>경찰차
<blog>https://tussle.tistory.com/694
<tag>다이나믹 프로그래밍
<java-code>
import java.io.*;
import java.util.*;
public class Main{
	static int N,W;
	static int[][] accident;
	static int[][] DP;
	public static void main(String[] arg) throws IOException{
		BufferedReader br  = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		W = Integer.parseInt(br.readLine());
		DP = new int[W+1][W+1];
		accident = new int[W+1][2];
		for(int i=1;i&lt;=W;i++) {
			st = new StringTokenizer(br.readLine()," ");
			accident[i][0] = Integer.parseInt(st.nextToken());
			accident[i][1] = Integer.parseInt(st.nextToken());
		}
		int result = cal(0,0,1);
		bw.write(String.valueOf(result));
		bw.newLine();

		int one = 0;
		int two = 0;
		for(int i=1;i&lt;=W;i++) {
			int width = distance(one,i,true);
			if(DP[one][two]-width == DP[i][two]) {
				bw.write("1");
				one = i;
			}
			else {
				bw.write("2");
				two = i;
			}
			bw.newLine();
		}
		bw.flush();
		bw.close();
		br.close();
	}
	static int cal(int first, int second, int next) {
		if(next==W+1)
			return 0;

		if(DP[first][second]!=0)
			return DP[first][second];

		int first_move_next = cal(next,second,next+1) + distance(first,next,true);
		int second_move_next = cal(first,next,next+1) + distance(second,next,false);

		DP[first][second] = Math.min(first_move_next, second_move_next);

		return DP[first][second];
	}
	static int distance(int cur, int next, boolean check) {
		int cur_x = accident[cur][0];
		int cur_y = accident[cur][1];
		int next_x = accident[next][0];
		int next_y = accident[next][1];
		if(cur==0) {
			if(check)
				cur_x = cur_y = 1;
			else
				cur_x = cur_y = N;
		}
		return Math.abs(cur_x - next_x) + Math.abs(cur_y - next_y);
	}
}