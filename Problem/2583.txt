<problem-name>영역 구하기
<blog>https://tussle.tistory.com/906
<tag>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색
<java-code>
import java.io.*;
import java.util.*;


public class Main {
    static class position{
        int x, y;
        public position(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int M,N,K;
    static boolean[][] arr, visited;
    static int[] dx = {0, 0, -1, 1};
    static int[] dy = {-1, 1, 0, 0};
    static ArrayList&lt;Integer> answer = new ArrayList&lt;>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        M = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        arr = new boolean[M][N];
        for(int i=0;i&lt;K;i++){
            st = new StringTokenizer(br.readLine(), " ");
            int x1 = Integer.parseInt(st.nextToken());
            int y1 = Integer.parseInt(st.nextToken());
            int x2 = Integer.parseInt(st.nextToken());
            int y2 = Integer.parseInt(st.nextToken());
            fillArr(x1, y1, x2, y2);
        }
        visited = new boolean[M][N];
        int count = 0;
        for(int i=0;i&lt;M;i++){
            for(int j=0;j&lt;N;j++){
                if(!arr[i][j] && !visited[i][j]){
                    bfs(i, j);
                    count++;
                }
            }
        }
        Collections.sort(answer);
        bw.write(String.valueOf(count));
        bw.newLine();
        for (Integer integer : answer){
            bw.write(String.valueOf(integer));
            bw.write(" ");
        }
        bw.flush();
        bw.close();
        br.close();
    }
    static void fillArr(int x1, int y1, int x2, int y2){
        for(int i=y1;i&lt;y2;i++){
            for(int j=x1;j&lt;x2;j++){
                arr[i][j] = true;
            }
        }
    }
    static void bfs(int y, int x){
        Queue&lt;position> q = new LinkedList&lt;>();
        q.add(new position(x, y));
        visited[y][x] = true;
        int width = 1;
        while(!q.isEmpty()){
            position cur = q.poll();
            for(int i=0;i&lt;4;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                if(inSpace(tempX,tempY) && !visited[tempY][tempX] && !arr[tempY][tempX]){
                    q.add(new position(tempX,tempY));
                    width++;
                    visited[tempY][tempX] = true;
                }
            }
        }
        answer.add(width);
    }
    static boolean inSpace(int x, int y){
        if(x>=0 && y>=0 && y&lt; M && x &lt; N)
            return true;
        return false;
    }
}